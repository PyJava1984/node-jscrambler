#!/usr/bin/env node
'use strict';

var commander = require('commander');
var glob = require('glob');
var jScrambler = require('../jscrambler');
var cli = require('../lib/cli');
var path = require('path');

commander
  .version(require('../package.json').version)
  .usage('[source files] [options]')
  .option('-c, --config [config]', 'JScrambler configuration options')
  .option('-o, --output [output]', 'Output directory. If not specified the output is printed.')
  .option('-a, --access-key <accessKey>', 'Access key')
  .option('-s, --secret-key <secretKey>', 'Secret key')
  .option('-h, --host [host]', 'Hostname')
  .option('-p, --port [port]', 'Port')
  .option('-v, --api-version [apiVersion]', 'Version')
  .option('--asserts-elimination [assertsElimination]', 'Remove function definitions and function calls with a given name.')
  .option('--browser-os-lock [browserOsLock]', 'Locks a JavaScript application to run only on a specific Browser or Operating System.')
  .option('--constant-folding', 'Simplifies constant expressions at compile-time to make your code faster at run-time.')
  .option('--dead-code', 'Randomly injects dead code into the source code.')
  .option('--dead-code-elimination', 'Removes dead code and void code from your JavaScript.')
  .option('--debugging-code-elimination [debuggingCodeElimination', 'Removes statements and public variable declarations used to control the output of debugging messages that help you debug your code.')
  .option('--dictionary-compression', 'further shrink your source code')
  .option('--domain-lock [domainLock]', 'Locks your project to a list of domains you specify.')
  .option('--dot-notation-elimination', 'Transforms dot notation to subscript notation.')
  .option('--exceptions-list [exceptionsList]', 'list of exceptions that will never be replaced or used to create new declarations')
  .option('--expiration-date [expirationDate]', 'Sets your JavaScript to expire after a date (YYYY/MM/DD) of your choosing.')
  .option('--function-outlining', 'Turns statements into new function declarations.')
  .option('--function-reorder', 'Randomly reorders your source code\'s function declarations.')
  .option('--ignore-files [ignoreFiles]', 'Define a list of files (relative paths) that JScrambler must ignore.')
  .option('--literal-hooking [literalHooking]', 'Replaces literals by a randomly sized chain of ternary operators. ')
  .option('--literal-duplicates', 'Replaces literal duplicates by a symbol.')
  .option('--member-enumeration', 'Replaces Browser and HTML DOM objects by a member enumeration.')
  .option('--mode [mode]', 'protection mode starter|mobile|html5|nodejs')
  .option('--name-prefix [namePrefix]', 'Set a prefix to be appended to the new names generated by JScrambler.')
  .option('--rename-all', 'Renames all identifiers found at your source code.')
  .option('--rename-local', 'Renames local names only.')
  .option('--self-defending', 'thwarting code tampering attempts by using anti-tampering and anti-debugging techniques.')
  .option('--string-splitting [stringSplitting]', 'split strings based on percentage of occurence in the source code input')
  .option('--whitespace', 'enable whitespace')
  .parse(process.argv);

var filesSrc = [];
var globSrc, params, config;

if (commander.config) {
  config = require(path.resolve(commander.config, '.'));
  commander.output = commander.output || config.filesDest;
  commander.accessKey = commander.accessKey || config.keys && config.keys.accessKey;
  commander.secretKey = commander.secretKey || config.keys && config.keys.secretKey;
  commander.host = commander.host || config.host;
  commander.port = commander.port || config.port;
  commander.apiVersion = commander.apiVersion || config.apiVersion;
  globSrc = config.filesSrc;
  params = config = config.params;
} else {
  params = config = {};
}

if (commander.args.length > 0) {
  globSrc = commander.args;
}

if (!commander.output && filesSrc.length > 1) {
  console.error('Destination must be specified unless only one file is used as input.');
  process.exit(1);
}

for (var i = 0, l = globSrc.length; i < l; ++i) {
  filesSrc = filesSrc.concat(glob.sync(globSrc[i], {dot: true}));
}

var dest = commander.output;
var accessKey = commander.accessKey;
var secretKey = commander.secretKey;
var host = commander.host;
var port = commander.port && parseInt(commander.port);
var apiVersion = commander.apiVersion;

// Parse configuration (normalize JScrambler parameters)
config = cli.parseConfig(commander, config);

config.files = filesSrc;

try {
  var client = new jScrambler.Client({
    keys: {
      accessKey: accessKey,
      secretKey: secretKey
    },
    host: host,
    port: port,
    apiVersion: apiVersion
  });

  jScrambler
    .uploadCode(client, config)
    .then(function (res) {
      return jScrambler.downloadCode(client, res.id);
    })
    .then(function (res) {
      if (filesSrc.length === 1 && !dest) {
        dest = function (buffer, file) {
          console.log(buffer.toString());
        };
      }
      return jScrambler.unzipProject(res, dest);
    })
    .fail(function (err) {
      console.error(err);
      process.exit(1);
    });
} catch (ex) {
  console.error(ex.toString());
  process.exit(1);
}
